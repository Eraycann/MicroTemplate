package org.kafka.security.util;

import org.kafka.security.model.UserPrincipal;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

// âœ… AuthUtil:
// SecurityContextâ€™teki kullanÄ±cÄ±dan token claim bilgilerini (ID, email vs.) Ã§eker.
// @PrePersist gibi lifecycle aÅŸamalarÄ±nda veya servis katmanÄ±nda kullanÄ±lÄ±r.
// Kodun her yerinde direkt SecurityContext'e eriÅŸmek yerine bu yardÄ±mcÄ± sÄ±nÄ±f kullanÄ±lÄ±r.
/*  âœ… AuthUtil.java
Ne iÅŸe yarar?
SecurityContext Ã¼zerinden gÃ¼ncel kullanÄ±cÄ± bilgilerini (ID, email, roller vs.) almak iÃ§in kullanÄ±lÄ±r.
Servis, Controller veya Entity lifecycle (@PrePersist gibi) iÅŸlemlerinde kimlik bilgisine ulaÅŸmayÄ± kolaylaÅŸtÄ±rÄ±r.
* */
public final class AuthUtil {

    private AuthUtil() {}

    public static Optional<UserPrincipal> getCurrentUser() {
        return Optional.ofNullable(SecurityContextHolder.getContext().getAuthentication())
                .map(Authentication::getPrincipal)
                .filter(UserPrincipal.class::isInstance)
                .map(UserPrincipal.class::cast);
    }

    public static Optional<String> getCurrentUserId() {
        return getCurrentUser().map(UserPrincipal::getId);
    }

    // ğŸ”´ ArtÄ±k token'da email yok, bu metod gereksiz
    // public static Optional<String> getCurrentUserEmail() {
    //     return getCurrentUser().map(UserPrincipal::getEmail);
    // }

    public static List<String> getCurrentUserRoles() {
        return Optional.ofNullable(SecurityContextHolder.getContext().getAuthentication())
                .map(Authentication::getAuthorities)
                .map(authorities -> authorities.stream()
                        .map(GrantedAuthority::getAuthority)
                        .collect(Collectors.toList()))
                .orElse(List.of());
    }
}

    /*  ğŸ§ª Neden Tip KontrolÃ¼ (instanceof) YapÄ±lÄ±r?
    Ã‡Ã¼nkÃ¼ bazÄ± durumlarda getPrincipal() ÅŸu tÃ¼rde de dÃ¶nebilir:
    null
    String (Ã¶rneÄŸin: "anonymousUser")

    YanlÄ±ÅŸlÄ±kla farklÄ± bir tÃ¼r
    Bu sebeple:
        .map(Authentication::getPrincipal)
        .filter(UserPrincipal.class::isInstance)
        .map(UserPrincipal.class::cast)
    ÅŸeklinde gÃ¼venli dÃ¶nÃ¼ÅŸÃ¼m yapÄ±lÄ±r. EÄŸer principal bizim istediÄŸimiz UserPrincipal deÄŸilse, Optional boÅŸ dÃ¶ner. Bu da NPE riskini azaltÄ±r.
    * */

/*  KullanÄ±cÄ± Bilgisine Kod Ãœzerinden EriÅŸim: AuthUtil
Servis veya Controller iÃ§erisinde, kimlik bilgisine ulaÅŸmak iÃ§in:
Optional<String> userId = AuthUtil.getCurrentUserId();
Optional<String> email = AuthUtil.getCurrentUserEmail();

Bu sÄ±nÄ±f, doÄŸrudan SecurityContextHolder eriÅŸimini soyutlayarak tekrar kullanÄ±labilir bir yapÄ± sunar.
* */

/*  KullanÄ±mÄ±:
Optional<String> userId = AuthUtil.getCurrentUserId();
Optional<String> email = AuthUtil.getCurrentUserEmail();
List<String> roles = AuthUtil.getCurrentUserRoles();
* */